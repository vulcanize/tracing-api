// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class UintStorage extends ethereum.SmartContract {
  static bind(address: Address): UintStorage {
    return new UintStorage("UintStorage", address);
  }

  get(key: string): BigInt {
    let result = super.call("get", "get(string):(uint256)", [
      ethereum.Value.fromString(key)
    ]);

    return result[0].toBigInt();
  }

  try_get(key: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("get", "get(string):(uint256)", [
      ethereum.Value.fromString(key)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}
